"""add prompt table

Revision ID: 7097a447f123
Revises: 72ccf20c1df1
Create Date: 2025-07-10 18:00:06.115400

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7097a447f123'
down_revision: Union[str, Sequence[str], None] = '72ccf20c1df1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_tags_id'), table_name='tags')
    op.drop_table('prompt_tag')
    op.drop_table('tags')
    op.add_column('prompts', sa.Column('content', sa.Text(), nullable=False))
    op.drop_constraint(op.f('prompts_sector_id_fkey'), 'prompts', type_='foreignkey')
    op.drop_column('prompts', 'sector_id')
    op.drop_column('prompts', 'prompt')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('prompts', sa.Column('prompt', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('prompts', sa.Column('sector_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_foreign_key(op.f('prompts_sector_id_fkey'), 'prompts', 'sectors', ['sector_id'], ['id'])
    op.drop_column('prompts', 'content')
    op.create_table('prompt_tag',
    sa.Column('prompt_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tag_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['prompt_id'], ['prompts.id'], name=op.f('prompt_tag_prompt_id_fkey')),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name=op.f('prompt_tag_tag_id_fkey'))
    )
    op.create_table('tags',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('tags_pkey')),
    sa.UniqueConstraint('name', name=op.f('tags_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_tags_id'), 'tags', ['id'], unique=False)
    # ### end Alembic commands ###
